[local-ctx]
exten => _.,1,NoOp(Incoming call)
 same => n,GotoIf($["${APP_REF}" != ""]?process_call)
 same => n,Set(APP_REF=${PJSIP_HEADER(read,X-App-Ref)})
 same => n,GotoIf($["${INGRESS_NUMBER}" != ""]?set_ingress_complete)
 same => n,Set(INGRESS_NUMBER=${CUT(CUT(PJSIP_HEADER(read,To),@,1),:,2)})

; Set the ingress number and check if this is an agent-to-agent call
set_ingress_complete:
 same => n,GotoIf($["${CALL_DIRECTION}" != ""]?set_direction_complete)
 same => n,Set(CALL_DIRECTION=${PJSIP_HEADER(read,X-Call-Direction)})

; Extract caller and callee information from SIP headers
set_direction_complete:
 same => n,Set(FROM_USER=${CUT(CUT(PJSIP_HEADER(read,From),@,1),:,2)})
 same => n,Set(TO_USER=${CUT(CUT(PJSIP_HEADER(read,To),@,1),:,2)})
 same => n,NoOp(Call From: ${FROM_USER} To: ${TO_USER})

; Check if this is an agent-to-agent call
 same => n,GotoIf($["${CALL_DIRECTION}" == "agent-to-agent"]?check_agent_app_ref)

; Detect agent-to-agent calls by pattern matching (both usernames are numeric)
 same => n,GotoIf($["${FROM_USER}" =~ "^[0-9]{3,5}$" && "${TO_USER}" =~ "^[0-9]{3,5}$"]?set_agent_to_agent)
 same => n,Goto(process_call)

; If detected an agent-to-agent call pattern, set the appropriate variables
set_agent_to_agent:
 same => n,NoOp(Detected potential agent-to-agent call from pattern matching)
 same => n,Set(AGENT_EXISTS=${ODBC_AGENT_EXISTS(${FROM_USER})})
 same => n,GotoIf($["${AGENT_EXISTS}" > 0]?confirm_agent_to_agent)
 same => n,Goto(process_call)

confirm_agent_to_agent:
 same => n,Set(CALL_DIRECTION=agent-to-agent)
 same => n,NoOp(Confirmed agent-to-agent call)

; Check if the caller agent has an app reference configured
check_agent_app_ref:
 same => n,Set(AGENT_APP_REF=${ODBC_AGENT_APP_REF(${FROM_USER})})
 same => n,NoOp(Agent App Ref: ${AGENT_APP_REF})
 same => n,GotoIf($["${AGENT_APP_REF}" != ""]?set_agent_app_ref)
 same => n,Goto(process_call)

; Set the agent's app reference if configured
set_agent_app_ref:
 same => n,Set(APP_REF=${AGENT_APP_REF})
 same => n,NoOp(Using agent app reference: ${APP_REF})

; Process the call normally with the configured APP_REF
process_call:
 same => n,NoOp(Processing call with APP_REF: ${APP_REF} and CALL_DIRECTION: ${CALL_DIRECTION})
 same => n,Stasis(mediacontroller)
 same => n,Hangup()

[agent_to_agent]
exten => _.,1,NoOp(Agent to Agent call via autopilot)
 same => n,Set(APP_REF=autopilot_agent)
 same => n,Stasis(mediacontroller)
 same => n,Hangup()
